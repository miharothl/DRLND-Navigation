#!/usr/bin/env python3
import argparse

from config.config import get_env_config, get_app_config
from dqn import logging
from dqn.environment import Environment
from dqn.logging import init_logging, set_logging_level, transform_verbose_count_to_logging_level
import logging
import logging.config
from dqn.play import Play
from dqn.train import Train
import numpy as np

def parse_arguments(params):
    ap = argparse.ArgumentParser(description="Runs data prep",
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    ap.add_argument("-v", "--verbose", dest="verbose_count",
                    action="count", default=0,
                    help="Increases log verbosity for each occurrence.")
    ap.add_argument('-t', '--train',
                    action='store_true',
                    help="Train")
    ap.add_argument('-f', '--model_filename',
                    default=None,
                    help="Model file")
    ap.add_argument('-p', '--play',
                    action='store_true',
                    help="play")
    ap.add_argument('-e', '--env',
                    default='cartpole',
                    help="Environment")
    ap.add_argument('-l', '--list_envs',
                    action='store_true',
                    help="List RL environment")
    ap.add_argument("-m", '--select_model',
                    default='score_max',
                    choices=['score_max', 'score_min', 'score_median', 'random'],
                    help="Model selection criteria")

    args = ap.parse_args()

    return args


def main():
    init_logging(logging.ERROR)

    params = get_app_config()

    try:
        args = parse_arguments(params)

        set_logging_level(transform_verbose_count_to_logging_level(args.verbose_count))

        logging.debug(params)

        config = get_env_config()
        environment = Environment(config)
        environment.set_env(args.env)
        agent = environment.get_agent()
        env = environment.get_env()

        if args.list_envs:
            environment.list_envs()
        elif args.train:
            train = Train(model_id=environment.get_model_id())
            train.train(agent, env, environment.is_rgb(),
                        model_filename = args.model_filename)

            # train.dqn_rgb(agent, env)
            # train.dqn_banana(agent, env)
        elif args.play:

            play = Play(model_id=environment.get_model_id(),
                        env=env,
                        agent=agent)
            if args.select_model == 'score_max':
                play.play(trained=True,
                          mode='human',
                          is_rgb=environment.is_rgb(),
                          model_filename = args.model_filename)
            #     # play.play_banana()
            # elif args.select_model == 'score_median':
            #     play.play(score_max=False, score_med=True, mode='human')
            # elif args.select_model == 'score_median':
            #     play.play(score_max=False, score_med=False, mode='human')
            else:
                play.play(trained=False, mode='human', is_rgb=environment.is_rgb())
                # play.play(trained=False, mode='human')

        env.close()

    except Exception as e:
        logging.exception("Something went wrong :-(")

    finally:
        logging.shutdown()


if __name__ == '__main__':
    main()
